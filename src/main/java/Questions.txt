Q) Which version of Java are you most likely to
try to certify in?
A - 8
B - 11
C - 17
D - what's certification

Q) Which are legal:
   A) class X { var x = 99; }
   B) void doStuff(var x) { }
   C)
   void doStuff() {
     var x;
     x = 100;
   }
   D) void doStuff() {  var x = 100; }
   E)
   void doStuff() {
     var x = { 1, 2, 3 };
   }

Q) Which are legal:

   A) void doStuff() { var x = new int[]{ 1, 2, 3 }; }
   B) void doStuff() { var [] x = new int[]{ 1, 2, 3 }; }
   C) void doStuff() {
     var x = 99;
     x = "Hello";
   }
   D) void doStuff() {
     var x = 1, y = 2;
   }
   E)
   void doStuff() {
     try {
      // stuff happens
      } catch (var ex) {
      }
   }

Q) Which are legal (13, 8, 8)
    A)
       for (var x = 0; x < 3; x++)
         System.out.println(x);
    B)
       try (var in = new FileReader("");
            var out = new FileWriter("")) {
       }
    C)
       var var = "var";

Q) Which are legal:
   A) { int x; }
      { int x; }
   B) class X {
        { sout(x); }
        int x;
      }
   C) {
        int x;
        { int x; }
      }
   D) {
        int x;
        Predicate<String> ps = x -> true;
      }

   E) for (int x = 0; x < 10; x++)
        ;
       int x;

Q)   Which print "true"
   A) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s == t);
   B) String s = "Hello";
      String t = "He";
      t += "llo";
      sout(s.equals(t));
   C) StringBuilder s = new StringBuilder("Hello");
      StringBuilder t = new StringBuilder("He");
      t.append("llo");
      sout(s.equals(t));
   D) List<String> ls = List.of("Fred", "Jim");
      List<String> ls2 = new ArrayList<>(ls);
      sout(ls.equals(ls2));
   E) LocalDate ld = LocalDate.of(2021, 3, 29);
      LocalDate ld2 = LocalDate.of(2021, 3, 29);
      sout(ld.equals(ld2));

Q)
Given:
class X {
  static String h = "Hello";
}
Which are true?
     String s1 = "Hello";
     String s2 = new StringBuilder("Hello").toString();
     String s3 = s2.intern();
     A) s1 == s2
     B) s2 == s3
     C) s1 == s3
     D) X.h == s1
     E) none of these

Q) Given:
   int j = 0;
   for (int i = 0; i < 3; i++) {
     if (i > ++j && i % 2 == 0) ++i = ++j;
     if (j > i + 2) continue;
     ++j;
     System.out.println(i + ", " + j);
   }

What is the result?
A) 0, 2
   1, 4
B) 0, 2
C) 1, 4
D) The program runs forever
E) Compilation fails

Q)
    void doStuff(int x, int y) {}         // Method A
    void doStuff(int x, long y) {}        // Method B
    void doStuff(long x, int y) {}        // Method C
    void doStuff(int ... x) {}            // Method D
    void doStuff(Integer x, Integer y) {} // Method E

  Given all five methods exist, which is invoked by the invocation
      doStuff(1, 2);

Q) if method A is removed, what happens?
A) compilation fails
B) method B is invoked
C) method C is invoked
D) method D is invoked
E) method E is invoked

Q) if methods A and B are removed, what happens?
A) compilation fails
B) runtime exception
C) method C is invoked
D) method D is invoked
E) method E is invoked

Q) if methods A, B, and C are removed, what happens?
A) compilation fails
B) a small explosion
C) method C is invoked
D) method D is invoked
E) method E is invoked

Q) Given
class AC implements AutoCloseable {
  private String name;
  public AC(String name) { this.name = name; }
  @Override public void close() { System.out.println("Closing " + name);} }
And:
    var ac0 = new AC("zero");
    try (var ac1 = new AC("one");
        var ac2 = new AC("two");
        ac0;){}
What is the result?
A) Compilation fails
B) Closing zero Closing two Closing one
C) Closing zero Closing one Closing two
D) Closing two Closing one Closing zero
E) Closing one Closing two Closing zero

Q) Given
 void doStuff() throws SQLException {};
 void doStuff2() throws FileNotFoundException {};
And:
 void tryStuff() ...insert here... {
   try {
     doStuff();
     doStuff2();
   } catch (SQLException | FileNotFoundException e) {
     throw e;
   }
 }

What is best at "...insert here..."?
A) throws Exception
B) throws SQLException
C) throws FileNotFoundException
D) throws FileNotFoundException, SQLException
E) nothing is needed, compilation succeeds as is

Q) enum Day {
     MONDAY(1), TUESDAY;
     public Day(int d) {}
     public Day() {}
   }
and:
sout(Day.MONDAY)

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) enum Day {
     MONDAY(1), TUESDAY;
     public Day(int d) {}
     public Day() {}
   }
and:
enum LabeledDay extends Day {
    WEEKEND(6, "Yay!");
    private LabeledDay(int ord, String name) {
      super(ord);
    }
}
sout(LabeledDay.WEEKEND)
What is the result?
A) 6
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q)   class Q25Base {
       int x = 99;
       { System.out.println("x is " + x); }
     }
     class Q25Sub extends Q25Base {
       Q25Sub(int x) {
        /* implicit */ super();
        System.out.println("in constructor, x is " + x); }
       public static void go() {
         new Q25Sub(1);
       }
     }

Given a call to go(), what is the result?
A) in constructor, x is 1
  x is 99
B) x is 99
  in constructor, x is 1
C) x is 99
  in constructor, x is 99
D) Compilation fails

Q)   class Q27Base { int x = 99; }
     class Q27Sub extends Q27Base {
       Q27Sub() {
         super(); this(4);
         System.out.println("in sub constructor, x is " + x);
       }
       Q27Sub(int x) {
         System.out.println("in default constructor, x is " + x);
       }
     }
Given a call to:
new Q27Sub();
What is the result?
A) in sub constructor x is 99  in default constructor, x is 4
B) in sub constructor x is 4   in default constructor, x is 4
C) in sub constructor x is 99   in default constructor, x is 99
D) Compilation fails
E) An exception is thrown

Q) Given:
 interface StudentCriterion {
   boolean test(Student s);
 }

and:
 class Student {
   public int getGpa() { return 0; }
   public List<String> getCourses() { return null; }
 }

Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();

Q)   Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q)   Which are correct declarations?
A) Comparator<String> cs = s1, s2 -> s2.compareTo(s1);
B) Comparator<String> cs = (s1, s2) -> s2.compareTo(s1);
C) Comparator<String> cs = (var s1, String s2) -> s2.compareTo(s1);
D) Comparator<String> cs = (var s1, s2) -> s2.compareTo(s1);
E) Comparator<String> cs = (String s1, String s2) -> s2.compareTo(s1);

Q)  Given:
    ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =

Q) Given:
 public static Predicate<String> getOne(int x) {
   return new Predicate<String>() {
     @Override public boolean test(String s) {
       return s.length() >= ++x;
     }};}
and:
 public static void main(String[] args) {
   System.out.println(
       List.of("Fred", "Jim", "Sheila")
           .removeIf(getOne(3)));
 }
What is the result?
A) true
B) [Fred, Jim]
C) [Jim]
D) Compilation fails
E) Exception at runtime